import { Easing } from 'eaz';
import EndBehavior from './EndBehavior';
import Keyframe from './keyframes/Keyframe';
import { RGBColor } from './interfaces/RGBColor';
import { Vector3 } from './interfaces/Vector3';
import { HSVColor } from './interfaces/HSVColor';
import CurveModifier from './CurveModifier';
declare class Curve<T> {
    static increaseFloat: Curve<number>;
    static decreaseFloat: Curve<number>;
    static increaseColor: Curve<RGBColor>;
    static decreaseColor: Curve<RGBColor>;
    keys: Keyframe<T>[];
    modifiers: CurveModifier<T>[];
    endBehaviour: EndBehavior;
    startTime: number;
    endTime: number;
    duration: number;
    smoothing: number;
    constructor(keys?: Keyframe<T>[], modifiers?: CurveModifier<T>[], endBehavior?: EndBehavior, smoothing?: number);
    update(): void;
    addModifier(modifier: CurveModifier<T>): void;
    addKeyframe(keyframe: Keyframe<T>): void;
    removeKeyframe(keyframe: Keyframe<T> | {
        time: number;
        value: T;
    }): void;
    removeKeyframeByTime(time: number): void;
    removeKeyframeByIndex(index: number): void;
    shiftPhase(amount: number): void;
    evaluate(time: number, modifierStop?: number): T;
    private _configureKeyframes;
    private _configureModifiers;
    protected _applyModifiers(rawValue: T, time: number, modifierStop: number): T;
    protected _rawEvaluate(time: number): T;
    protected _rangeEvaluate(time: number): T;
    protected _calculateBounds(): void;
    protected _pingPongTime(time: number): number;
    static builder<T>(KeyframeType: new (time: number, value: T, easing: Easing) => Keyframe<T>, inValue: T, outValue: T, duration?: number, easing?: Easing): Curve<T>;
    static floatBuilder(inValue: number, outValue: number, duration?: number, easing?: Easing): Curve<number>;
    static bezierBuilder(inValue: number, outValue: number, duration?: number, handleMagnitude?: number, automatic?: boolean): Curve<number>;
    static booleanBuilder(inValue: boolean, outValue: boolean, duration?: number, easing?: Easing): Curve<boolean>;
    static stringBuilder(inValue: string, outValue: string, duration?: number, easing?: Easing): Curve<string>;
    static rgbColorBuilder(inValue: RGBColor, outValue: RGBColor, duration?: number, easing?: Easing): Curve<RGBColor>;
    static hsvColorBuilder(inValue: HSVColor, outValue: HSVColor, duration?: number, easing?: Easing): Curve<HSVColor>;
    static vector3Builder(inValue: Vector3, outValue: Vector3, duration?: number, easing?: Easing): Curve<Vector3>;
    static listBuilder(inValue: number[], outValue: number[], duration?: number, easing?: Easing): Curve<number[]>;
    static objectBuilder(inValue: object, outValue: object, duration?: number, easing?: Easing): Curve<object>;
}
export default Curve;
